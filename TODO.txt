================================================================================
                     PEAKSELF OPTIMIZATION & REFACTORING TODO
================================================================================
Generated: 2025-10-06
Priority: ðŸ”´ Critical | ðŸŸ¡ High | ðŸŸ¢ Medium | ðŸ”µ Low

================================================================================
                            PHASE 1: FOUNDATION & SECURITY
================================================================================

[ðŸ”´ CRITICAL] 1. EXTRACT SHARED DATABASE POOL
  â”œâ”€ Create server/utils/db.js with single Pool instance
  â”œâ”€ Remove duplicate Pool instances from:
  â”‚  â”œâ”€ server/routes/auth.js
  â”‚  â”œâ”€ server/routes/admin.js
  â”‚  â”œâ”€ server/routes/subscribe.js
  â”‚  â””â”€ server/routes/track.js
  â”œâ”€ Update all imports to use shared pool
  â””â”€ Test database connections across all routes
  Status: [ ] Not Started

[ðŸ”´ CRITICAL] 2. ENVIRONMENT VARIABLE VALIDATION
  â”œâ”€ Create server/utils/validateEnv.js
  â”œâ”€ Validate required vars on startup:
  â”‚  â”œâ”€ DATABASE_URL
  â”‚  â”œâ”€ SESSION_SECRET
  â”‚  â”œâ”€ JWT_SECRET
  â”‚  â””â”€ NODE_ENV
  â”œâ”€ Exit process if validation fails
  â””â”€ Add helpful error messages
  Status: [ ] Not Started
  Dependencies: None

[ðŸ”´ CRITICAL] 3. RATE LIMITING
  â”œâ”€ Install: npm install express-rate-limit
  â”œâ”€ Create server/middleware/rateLimiter.js
  â”œâ”€ Add rate limiters for:
  â”‚  â”œâ”€ Auth endpoints (5 requests/15 min)
  â”‚  â”œâ”€ Subscribe endpoint (3 requests/15 min)
  â”‚  â””â”€ API endpoints (100 requests/15 min)
  â””â”€ Apply to routes in server/index.js
  Status: [ ] Not Started
  Dependencies: None

[ðŸ”´ CRITICAL] 4. HELMET SECURITY HEADERS
  â”œâ”€ Install: npm install helmet
  â”œâ”€ Add to server/index.js (before routes)
  â”œâ”€ Configure CSP for production
  â””â”€ Test with security headers checker
  Status: [ ] Not Started
  Dependencies: None

[ðŸŸ¡ HIGH] 5. CSRF PROTECTION
  â”œâ”€ Install: npm install csurf
  â”œâ”€ Create server/middleware/csrf.js
  â”œâ”€ Add CSRF token endpoint
  â”œâ”€ Update forms to include CSRF tokens
  â””â”€ Add to sensitive routes (POST, PUT, DELETE)
  Status: [ ] Not Started
  Dependencies: None

[ðŸŸ¡ HIGH] 6. WINSTON LOGGING
  â”œâ”€ Install: npm install winston
  â”œâ”€ Create server/utils/logger.js with:
  â”‚  â”œâ”€ Console transport (development)
  â”‚  â”œâ”€ File transport (error.log)
  â”‚  â””â”€ File transport (combined.log)
  â”œâ”€ Replace console.log/error with logger
  â”œâ”€ Add request logging middleware
  â””â”€ Configure log rotation
  Status: [ ] Not Started
  Dependencies: None

================================================================================
                        PHASE 2: CODE STRUCTURE & ORGANIZATION
================================================================================

[ðŸ”´ CRITICAL] 7. EXTRACT AUTHENTICATION MIDDLEWARE
  â”œâ”€ Create server/middleware/auth.js with:
  â”‚  â”œâ”€ verifyJwt()
  â”‚  â”œâ”€ getCurrentUser()
  â”‚  â”œâ”€ requireAuth()
  â”‚  â””â”€ requireAdmin()
  â”œâ”€ Remove duplicate auth logic from routes
  â””â”€ Update all routes to use new middleware
  Status: [ ] Not Started
  Dependencies: [1]

[ðŸ”´ CRITICAL] 8. EXTRACT UTILITY FUNCTIONS
  â”œâ”€ Create server/utils/dateUtils.js
  â”‚  â””â”€ normalizeRange()
  â”œâ”€ Create server/constants.js
  â”‚  â”œâ”€ COOKIE_MAX_AGE
  â”‚  â”œâ”€ SESSION_TIMEOUT
  â”‚  â”œâ”€ JWT_EXPIRATION
  â”‚  â””â”€ RATE_LIMITS
  â””â”€ Replace magic numbers throughout codebase
  Status: [ ] Not Started
  Dependencies: [1]

[ðŸŸ¡ HIGH] 9. RESTRUCTURE ADMIN ROUTES (BACKEND)
  â”œâ”€ Create server/routes/admin/ directory with:
  â”‚  â”œâ”€ index.js (main aggregator)
  â”‚  â”œâ”€ dashboard.js (overview & metrics)
  â”‚  â”œâ”€ users.js (user management)
  â”‚  â”œâ”€ traffic.js (traffic analytics)
  â”‚  â””â”€ sessions.js (session tracking)
  â”œâ”€ Split existing admin.js into modules
  â”œâ”€ Update server/index.js imports
  â”œâ”€ Test all admin endpoints
  â””â”€ Delete old admin.js file
  Status: [ ] Not Started
  Dependencies: [1, 7, 8]

[ðŸŸ¡ HIGH] 9a. SEPARATE ADMIN PANEL TABS (FRONTEND)
  â”œâ”€ Create client/src/pages/admin/ directory with:
  â”‚  â”œâ”€ AdminLayout.jsx (sidebar + routing)
  â”‚  â”œâ”€ OverviewPage.jsx
  â”‚  â”œâ”€ TrafficPage.jsx
  â”‚  â”œâ”€ SessionsPage.jsx
  â”‚  â”œâ”€ UsersPage.jsx
  â”‚  â”œâ”€ ContentPage.jsx
  â”‚  â””â”€ SettingsPage.jsx
  â”œâ”€ Move admin components to pages/admin/
  â”œâ”€ Update routing to use URL paths (/admin/overview, /admin/users, etc.)
  â”œâ”€ Add browser back/forward navigation support
  â”œâ”€ Update Admin.jsx to be a router wrapper
  â””â”€ Test all admin navigation
  Status: [ ] Not Started
  Dependencies: None

[ðŸŸ¢ MEDIUM] 9b. ORGANIZE PROJECT FOLDER STRUCTURE
  â”œâ”€ Frontend organization:
  â”‚  â”œâ”€ Create client/src/hooks/ for custom hooks
  â”‚  â”œâ”€ Create client/src/contexts/ for React contexts
  â”‚  â”œâ”€ Create client/src/utils/ for utility functions
  â”‚  â”œâ”€ Create client/src/styles/ for shared styles
  â”‚  â”œâ”€ Move admin components to pages/admin/components/
  â”‚  â””â”€ Create client/src/types/ for TypeScript types (future)
  â”œâ”€ Backend organization:
  â”‚  â”œâ”€ Create server/utils/ (db.js, logger.js, cache.js)
  â”‚  â”œâ”€ Create server/middleware/ (already in plan)
  â”‚  â”œâ”€ Create server/services/ for business logic
  â”‚  â”œâ”€ Create server/config/ for configuration
  â”‚  â””â”€ Create server/validators/ for request validation schemas
  â”œâ”€ Create ARCHITECTURE.md documenting structure
  â””â”€ Update imports across codebase
  Status: [ ] Not Started
  Dependencies: [9, 9a]

[ðŸŸ¡ HIGH] 10. CENTRALIZED ERROR HANDLING
  â”œâ”€ Create server/middleware/errorHandler.js
  â”œâ”€ Add custom error classes:
  â”‚  â”œâ”€ ValidationError
  â”‚  â”œâ”€ AuthenticationError
  â”‚  â”œâ”€ AuthorizationError
  â”‚  â””â”€ DatabaseError
  â”œâ”€ Add error handler middleware to server/index.js
  â”œâ”€ Replace try-catch error responses
  â””â”€ Add error logging
  Status: [ ] Not Started
  Dependencies: [6]

[ðŸŸ¡ HIGH] 11. MIDDLEWARE ORGANIZATION
  â”œâ”€ Create server/middleware/ directory structure:
  â”‚  â”œâ”€ auth.js (authentication & authorization)
  â”‚  â”œâ”€ validation.js (request validation)
  â”‚  â”œâ”€ errorHandler.js (centralized errors)
  â”‚  â”œâ”€ rateLimiter.js (rate limiting)
  â”‚  â”œâ”€ csrf.js (CSRF protection)
  â”‚  â””â”€ logger.js (request logging)
  â””â”€ Organize imports in server/index.js
  Status: [ ] Not Started
  Dependencies: [3, 5, 6, 10]

================================================================================
                          PHASE 3: DATABASE OPTIMIZATION
================================================================================

[ðŸ”´ CRITICAL] 12. POSTGRESQL SESSION STORE
  â”œâ”€ Install: npm install connect-pg-simple
  â”œâ”€ Update server/index.js session config
  â”œâ”€ Use existing 'sessions' table
  â”œâ”€ Test session persistence
  â””â”€ Remove in-memory session warning
  Status: [ ] Not Started
  Dependencies: [1]

[ðŸŸ¡ HIGH] 13. DATABASE MIGRATIONS
  â”œâ”€ Install: npm install node-pg-migrate
  â”œâ”€ Create migrations/ directory
  â”œâ”€ Convert queries.sql to migrations:
  â”‚  â”œâ”€ 001_initial_schema.js
  â”‚  â”œâ”€ 002_add_tracking_tables.js
  â”‚  â”œâ”€ 003_add_indexes.js
  â”‚  â””â”€ 004_add_dashboard_metrics.js
  â”œâ”€ Add migration scripts to package.json
  â””â”€ Document migration process in README
  Status: [ ] Not Started
  Dependencies: [1]

[ðŸŸ¡ HIGH] 14. IMPLEMENT SOFT DELETES
  â”œâ”€ Add deleted_at column to users table
  â”œâ”€ Add deleted_at column to relevant tables
  â”œâ”€ Create indexes for deleted_at IS NULL
  â”œâ”€ Update queries to exclude soft-deleted records
  â”œâ”€ Add admin endpoint to restore soft-deleted users
  â””â”€ Create cleanup script for old soft-deleted records
  Status: [ ] Not Started
  Dependencies: [13]

[ðŸŸ¢ MEDIUM] 15. QUERY RESULT CACHING
  â”œâ”€ Install: npm install node-cache
  â”œâ”€ Create server/utils/cache.js
  â”œâ”€ Cache dashboard metrics (5-15 min TTL)
  â”œâ”€ Cache traffic summary (5 min TTL)
  â”œâ”€ Add cache invalidation on data changes
  â””â”€ Add cache hit/miss logging
  Status: [ ] Not Started
  Dependencies: [1, 6]

[ðŸŸ¢ MEDIUM] 16. ENABLE PG_STAT_STATEMENTS
  â”œâ”€ Add to PostgreSQL config: shared_preload_libraries = 'pg_stat_statements'
  â”œâ”€ Create extension: CREATE EXTENSION pg_stat_statements;
  â”œâ”€ Create admin endpoint for slow queries
  â”œâ”€ Add query performance monitoring
  â””â”€ Document slow query optimization process
  Status: [ ] Not Started
  Dependencies: None

[ðŸŸ¢ MEDIUM] 17. ADD DATABASE INDEXES
  â”œâ”€ Composite indexes for common queries:
  â”‚  â”œâ”€ traffic_events(source, occurred_at DESC)
  â”‚  â”œâ”€ users(role, verified) WHERE verified = TRUE
  â”‚  â””â”€ session_events(session_id, occurred_at DESC)
  â”œâ”€ Test query performance improvements
  â””â”€ Document index rationale
  Status: [ ] Not Started
  Dependencies: [13]

================================================================================
                           PHASE 4: BACKEND PERFORMANCE
================================================================================

[ðŸŸ¡ HIGH] 18. API RESPONSE COMPRESSION
  â”œâ”€ Install: npm install compression
  â”œâ”€ Add to server/index.js (early in middleware chain)
  â”œâ”€ Configure compression threshold (1kb)
  â”œâ”€ Test response sizes
  â””â”€ Measure performance improvement
  Status: [ ] Not Started
  Dependencies: None

[ðŸŸ¢ MEDIUM] 19. ENHANCED HEALTH CHECK
  â”œâ”€ Update /api/health endpoint to check:
  â”‚  â”œâ”€ Database connectivity
  â”‚  â”œâ”€ Redis connectivity (if added)
  â”‚  â””â”€ Disk space
  â”œâ”€ Add /api/health/ready for Kubernetes readiness
  â””â”€ Add /api/health/live for liveness probe
  Status: [ ] Not Started
  Dependencies: [1]

[ðŸŸ¢ MEDIUM] 20. API LAYER ABSTRACTION (Backend)
  â”œâ”€ Create server/utils/response.js with:
  â”‚  â”œâ”€ success(res, data, message)
  â”‚  â”œâ”€ error(res, error, statusCode)
  â”‚  â”œâ”€ paginated(res, data, pagination)
  â”‚  â””â”€ noContent(res)
  â””â”€ Update routes to use standard responses
  Status: [ ] Not Started
  Dependencies: None

================================================================================
                           PHASE 5: FRONTEND OPTIMIZATION
================================================================================

[ðŸ”´ CRITICAL] 21. CODE SPLITTING & LAZY LOADING
  â”œâ”€ Update client/src/App.jsx with React.lazy:
  â”‚  â”œâ”€ const Admin = lazy(() => import('./pages/Admin'))
  â”‚  â”œâ”€ const Blog = lazy(() => import('./pages/Blog'))
  â”‚  â”œâ”€ const Post = lazy(() => import('./pages/Post'))
  â”‚  â””â”€ Wrap Routes in <Suspense>
  â”œâ”€ Add loading component
  â”œâ”€ Test bundle size reduction
  â””â”€ Measure page load improvements
  Status: [ ] Not Started
  Dependencies: None

[ðŸ”´ CRITICAL] 22. OPTIMIZE BUNDLE SIZE
  â”œâ”€ Analyze current bundle: npm run build && npx vite-bundle-visualizer
  â”œâ”€ Replace lucide-react with individual imports:
  â”‚  â””â”€ import { ArrowRight } from 'lucide-react/dist/esm/icons/arrow-right'
  â”œâ”€ Remove unused dependencies
  â”œâ”€ Configure tree-shaking in vite.config.js
  â”œâ”€ Target: Reduce bundle by 30%
  â””â”€ Document bundle optimization
  Status: [ ] Not Started
  Dependencies: None

[ðŸŸ¡ HIGH] 23. API LAYER ABSTRACTION (Frontend)
  â”œâ”€ Create client/src/api/client.js with:
  â”‚  â”œâ”€ apiClient.get()
  â”‚  â”œâ”€ apiClient.post()
  â”‚  â”œâ”€ apiClient.put()
  â”‚  â”œâ”€ apiClient.delete()
  â”‚  â””â”€ Error handling & retry logic
  â”œâ”€ Create client/src/api/endpoints.js for URLs
  â”œâ”€ Replace fetch() calls with apiClient
  â””â”€ Add request/response interceptors
  Status: [ ] Not Started
  Dependencies: None

[ðŸŸ¡ HIGH] 24. ENVIRONMENT-SPECIFIC CONFIGS
  â”œâ”€ Create client/src/config.js with:
  â”‚  â”œâ”€ API_BASE
  â”‚  â”œâ”€ IS_DEV
  â”‚  â”œâ”€ IS_PROD
  â”‚  â””â”€ FEATURE_FLAGS
  â”œâ”€ Replace import.meta.env usage
  â””â”€ Add .env.development, .env.production
  Status: [ ] Not Started
  Dependencies: None

[ðŸŸ¡ HIGH] 25. REACT PERFORMANCE OPTIMIZATION
  â”œâ”€ Add React.memo to components:
  â”‚  â”œâ”€ PostCard
  â”‚  â”œâ”€ Header
  â”‚  â”œâ”€ Footer
  â”‚  â””â”€ SearchBar
  â”œâ”€ Add useMemo for expensive computations
  â”œâ”€ Add useCallback for event handlers
  â”œâ”€ Use React DevTools Profiler
  â””â”€ Document performance improvements
  Status: [ ] Not Started
  Dependencies: None

[ðŸŸ¡ HIGH] 26. LOADING SCREENS & SKELETONS
  â”œâ”€ Create client/src/components/LoadingSpinner.jsx
  â”œâ”€ Create client/src/components/SkeletonCard.jsx
  â”œâ”€ Create client/src/components/SkeletonList.jsx
  â”œâ”€ Add to lazy-loaded routes
  â”œâ”€ Add to data fetching states
  â””â”€ Improve perceived performance
  Status: [ ] Not Started
  Dependencies: [21]

[ðŸŸ¢ MEDIUM] 27. PROGRESSIVE WEB APP (PWA)
  â”œâ”€ Install: npm install vite-plugin-pwa
  â”œâ”€ Configure vite.config.js with PWA settings
  â”œâ”€ Create manifest.json with app details
  â”œâ”€ Add service worker for offline support
  â”œâ”€ Add install prompt
  â”œâ”€ Cache static assets
  â”œâ”€ Test offline functionality
  â””â”€ Add to App Store / Play Store (future)
  Status: [ ] Not Started
  Dependencies: [21, 22]

[ðŸŸ¢ MEDIUM] 28. FRONTEND ERROR BOUNDARY
  â”œâ”€ Create client/src/components/ErrorBoundary.jsx
  â”œâ”€ Wrap App with ErrorBoundary
  â”œâ”€ Add error logging to backend
  â”œâ”€ Add fallback UI
  â””â”€ Test error scenarios
  Status: [ ] Not Started
  Dependencies: None

================================================================================
                             PHASE 6: DOCUMENTATION
================================================================================

[ðŸŸ¡ HIGH] 29. UPDATE README.md
  â”œâ”€ Add project description
  â”œâ”€ Add setup instructions (step-by-step)
  â”œâ”€ Add database setup & migrations
  â”œâ”€ Add environment variable documentation
  â”œâ”€ Add architecture overview
  â”œâ”€ Add API documentation (or link to Swagger)
  â”œâ”€ Add deployment guide
  â””â”€ Add troubleshooting section
  Status: [ ] Not Started
  Dependencies: None

[ðŸŸ¢ MEDIUM] 30. API DOCUMENTATION
  â”œâ”€ Install: npm install swagger-jsdoc swagger-ui-express
  â”œâ”€ Add JSDoc comments to routes
  â”œâ”€ Generate OpenAPI spec
  â”œâ”€ Add /api/docs endpoint
  â””â”€ Document authentication flow
  Status: [ ] Not Started
  Dependencies: None

[ðŸŸ¢ MEDIUM] 31. CODE COMMENTS & JSDOC
  â”œâ”€ Add JSDoc comments to complex functions
  â”œâ”€ Document business logic decisions
  â”œâ”€ Add inline comments for tricky code
  â””â”€ Remove outdated comments
  Status: [ ] Not Started
  Dependencies: None

================================================================================
                          PHASE 7: TESTING & QUALITY
================================================================================

[ðŸŸ¡ HIGH] 32. UNIT TESTING SETUP
  â”œâ”€ Install: npm install --save-dev vitest @testing-library/react
  â”œâ”€ Install: npm install --save-dev @testing-library/jest-dom
  â”œâ”€ Configure vitest.config.js
  â”œâ”€ Create test/ directory structure
  â”œâ”€ Add test scripts to package.json
  â””â”€ Set coverage targets (80% backend, 70% frontend)
  Status: [ ] Not Started
  Dependencies: None

[ðŸŸ¢ MEDIUM] 33. API INTEGRATION TESTS
  â”œâ”€ Install: npm install --save-dev supertest
  â”œâ”€ Create server/tests/ directory
  â”œâ”€ Write tests for:
  â”‚  â”œâ”€ Auth endpoints
  â”‚  â”œâ”€ Admin endpoints
  â”‚  â”œâ”€ User management
  â”‚  â””â”€ Analytics tracking
  â””â”€ Run tests in CI/CD
  Status: [ ] Not Started
  Dependencies: [32]

[ðŸ”µ LOW] 34. E2E TESTING
  â”œâ”€ Install: npm install --save-dev playwright
  â”œâ”€ Create e2e/ directory
  â”œâ”€ Write E2E tests for critical flows:
  â”‚  â”œâ”€ User registration & login
  â”‚  â”œâ”€ Admin dashboard access
  â”‚  â””â”€ Newsletter subscription
  â””â”€ Add to CI/CD pipeline
  Status: [ ] Not Started
  Dependencies: [32]

================================================================================
                            PHASE 8: CI/CD & DEVOPS
================================================================================

[ðŸŸ¢ MEDIUM] 35. DOCKER SUPPORT
  â”œâ”€ Create Dockerfile for backend
  â”œâ”€ Create Dockerfile for frontend
  â”œâ”€ Create docker-compose.yml for local dev
  â”œâ”€ Add .dockerignore
  â”œâ”€ Test Docker builds
  â””â”€ Document Docker usage
  Status: [ ] Not Started
  Dependencies: None

[ðŸŸ¢ MEDIUM] 36. GITHUB ACTIONS CI/CD
  â”œâ”€ Create .github/workflows/test.yml
  â”œâ”€ Add linting step
  â”œâ”€ Add testing step
  â”œâ”€ Add build step
  â”œâ”€ Add deployment step (optional)
  â””â”€ Add status badges to README
  Status: [ ] Not Started
  Dependencies: [32, 35]

[ðŸ”µ LOW] 37. MONITORING & ALERTING
  â”œâ”€ Set up error tracking (Sentry)
  â”œâ”€ Set up performance monitoring (New Relic/DataDog)
  â”œâ”€ Add database query monitoring
  â”œâ”€ Set up alerts for critical errors
  â””â”€ Create monitoring dashboard
  Status: [ ] Not Started
  Dependencies: None

================================================================================
                              PROGRESS TRACKING
================================================================================

PHASE 1: Foundation & Security        [      ] 0/6 complete
PHASE 2: Code Structure & Organization [      ] 0/5 complete
PHASE 3: Database Optimization         [      ] 0/6 complete
PHASE 4: Backend Performance           [      ] 0/3 complete
PHASE 5: Frontend Optimization         [      ] 0/8 complete
PHASE 6: Documentation                 [      ] 0/3 complete
PHASE 7: Testing & Quality             [      ] 0/3 complete
PHASE 8: CI/CD & DevOps               [      ] 0/3 complete

OVERALL PROGRESS: [                                              ] 0/37 (0%)

================================================================================
                                    NOTES
================================================================================

Priority Guide:
  ðŸ”´ CRITICAL - Must be done before production deployment
  ðŸŸ¡ HIGH     - Should be done soon, significant impact
  ðŸŸ¢ MEDIUM   - Important for long-term maintainability
  ðŸ”µ LOW      - Nice to have, can be deferred

Estimated Timeline:
  - Phase 1-2: 2-3 weeks (Critical foundation work)
  - Phase 3-4: 1-2 weeks (Performance & database)
  - Phase 5:   1-2 weeks (Frontend optimization)
  - Phase 6-8: 1-2 weeks (Documentation, testing, DevOps)
  - Total:     5-9 weeks (depending on team size)

Tips:
  - Work through phases sequentially
  - Complete dependencies before starting dependent tasks
  - Test thoroughly after each task
  - Update this file as you complete tasks
  - Mark completed tasks: [x] or [âœ“]
  - Add notes/blockers inline
  - Review progress weekly

================================================================================
                                QUICK REFERENCE
================================================================================

Install Commands (run as needed):
  npm install express-rate-limit helmet csurf compression
  npm install connect-pg-simple node-cache winston
  npm install node-pg-migrate
  npm install vite-plugin-pwa
  npm install swagger-jsdoc swagger-ui-express
  npm install --save-dev vitest @testing-library/react @testing-library/jest-dom
  npm install --save-dev supertest playwright

Priority Order for Quick Wins:
  1. Extract shared database pool (#1)
  2. Environment variable validation (#2)
  3. Rate limiting (#3)
  4. Helmet security (#4)
  5. PostgreSQL session store (#12)
  6. Code splitting (#21)
  7. Bundle optimization (#22)

================================================================================
Last Updated: 2025-10-06
Next Review: [Add date after first review]
================================================================================
